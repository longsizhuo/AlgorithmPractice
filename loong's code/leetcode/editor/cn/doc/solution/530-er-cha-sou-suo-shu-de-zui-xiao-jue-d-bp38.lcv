> Problem: [530. 二叉搜索树的最小绝对差](https://leetcode.cn/problems/minimum-absolute-difference-in-bst/description/)

[TOC]

# 思路

利用二叉查找树的**中序遍历**为有序的性质，计算中序遍历中临近的两个节点之差的绝对值，取最小值。

# Code

* []

```Java
class Solution {
    private int minDiff = Integer.MAX_VALUE;
    private TreeNode preNode = null;

    public int getMinimumDifference(TreeNode root) {
        inOrder(root);
        return minDiff;
    }

    private void inOrder(TreeNode node) {
        if (node == null) return;
        inOrder(node.left);
        if (preNode != null) minDiff = Math.min(minDiff, node.val - preNode.val);
        preNode = node;
        inOrder(node.right);
    }
}
```

* []

```C++
class Solution {
public:
    int minDiff = INT_MAX;
    TreeNode* pre = nullptr;
    int getMinimumDifference(TreeNode* root) {
        inOrder(root);
        return minDiff;
    }
    void inOrder(TreeNode* root){
        if(root == nullptr) return;
        inOrder(root->left);
        if(pre != nullptr) minDiff = min(minDiff, root->val - pre->val);
        pre = root;
        inOrder(root->right);
    }
};
```

# 复杂度分析：

- **时间复杂度**：$O(n)$，其中 `n` 为二叉搜索树节点的个数。每个节点在中序遍历中都会被访问一次且只会被访问一次，因此总时间复杂度为 $O(n)$。
- **空间复杂度**：$O(n)$。递归函数的空间复杂度取决于递归的栈深度，而栈深度在二叉搜索树为一条链的情况下会达到 $O(n)$ 级别。

> 放弃一件事很容易，每天能坚持一件事一定很酷，一起每日一题吧！

**关注我 [leetCode专栏](http://t.csdn.cn/kQLJO)，每日更新！**
