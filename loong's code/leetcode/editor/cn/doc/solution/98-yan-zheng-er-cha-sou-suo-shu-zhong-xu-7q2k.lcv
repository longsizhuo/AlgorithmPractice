> Problem: [98. 验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/description/)

[TOC]

# 思路

> 讲述看到这一题的思路

# 解题方法

> 描述你的解题方法

# 复杂度

- 时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

- 空间复杂度:

> 添加空间复杂度, 示例： $O(n)$

# Code

* []

```Java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
//指向前一个元素的指针  声明在方法前：变量将在整个类中可见
        TreeNode pre = null ;

    public boolean isValidBST(TreeNode root) {
        
        //终止条件
        if(root == null){
            return true;    //二叉搜索树可以为空
        }
        
        //中序遍历  左中右
        //左
        boolean left = isValidBST(root.left);
        if( !left){
            return false;
        }
        //中  左子树遍历起来正确的结果应该是后一个元素比前一个元素大 (相等也不行)
        if(pre != null && pre.val >= root.val){
            return false;
        }
           pre = root;   //指针法 指针跟着动
        
        //右
        boolean right = isValidBST(root.right);
        return right;    //前面经过多次判断后,到此,可以通过判断右子树的true或者false来返回结果.
    }
}
```

