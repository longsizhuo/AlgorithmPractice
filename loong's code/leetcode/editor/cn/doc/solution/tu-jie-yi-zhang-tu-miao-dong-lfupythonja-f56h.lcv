做本题前，推荐先完成 [146. LRU 缓存](https://leetcode.cn/problems/lru-cache/)，相当于本题的简单版本。[我的题解](https://leetcode.cn/problems/lru-cache/solution/tu-jie-yi-zhang-tu-miao-dong-lrupythonja-czgt/)

![460-2-c.png](https://pic.leetcode.cn/1695621293-JySfYQ-460-2-c.png)

#### 答疑

**问**：一个双向链表需要几个哨兵节点？

**答**：一个就够了。一开始哨兵节点 $\textit{dummy}$ 的 $\textit{prev}$ 和 $\textit{next}$ 都指向 $\textit{dummy}$。随着节点的插入，$\textit{dummy}$ 的 $\textit{next}$ 指向链表的第一个节点（最上面的书），$\textit{prev}$ 指向链表的最后一个节点（最下面的书）。

**问**：为什么 $\textit{minFreq}$ 一定对应着最左边的非空的那摞书？

**答**：在添加一本新书的情况下，这本新书一定是放在 $\textit{freq}=1$ 的那摞书上，此时我们把 $\textit{minFreq}$ 置为 $1$。在「抽出一本书且这摞书变成空」的情况下，我们会把这本书放到它右边这摞书的最上面。如果变成空的那摞书是最左边的，我们还会把 $\textit{minFreq}$ 加一。所以无论如何，$\textit{minFreq}$ 都会对应着最左边的非空的那摞书。

**问**：有没有一些让代码变快的方法？

**答**：有两处「移除空链表」的逻辑是可以去掉的，代码（可能）会更快。

* [sol-Python3]

```py
class Node:
    # 提高访问属性的速度，并节省内存
    __slots__ = 'prev', 'next', 'key', 'value', 'freq'

    def __init__(self, key=0, val=0):
        self.key = key
        self.value = val
        self.freq = 1  #  新书只读了一次

class LFUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.key_to_node = dict()
        def new_list() -> Node:
            dummy = Node()  # 哨兵节点
            dummy.prev = dummy
            dummy.next = dummy
            return dummy
        self.freq_to_dummy = defaultdict(new_list)

    def get_node(self, key: int) -> Optional[Node]:
        if key not in self.key_to_node:  # 没有这本书
            return None
        node = self.key_to_node[key]  # 有这本书
        self.remove(node)  # 把这本书抽出来
        dummy = self.freq_to_dummy[node.freq]
        if dummy.prev == dummy:  # 抽出来后，这摞书是空的
            del self.freq_to_dummy[node.freq]  # 移除空链表
            if self.min_freq == node.freq:  # 这摞书是最左边的
                self.min_freq += 1
        node.freq += 1  # 看书次数 +1
        self.push_front(self.freq_to_dummy[node.freq], node)  # 放在右边这摞书的最上面
        return node

    def get(self, key: int) -> int:
        node = self.get_node(key)
        return node.value if node else -1

    def put(self, key: int, value: int) -> None:
        node = self.get_node(key)
        if node:  # 有这本书
            node.value = value  # 更新 value
            return
        if len(self.key_to_node) == self.capacity:  # 书太多了
            dummy = self.freq_to_dummy[self.min_freq]
            back_node = dummy.prev  # 最左边那摞书的最下面的书
            del self.key_to_node[back_node.key]
            self.remove(back_node)  # 移除
            if dummy.prev == dummy:  # 这摞书是空的
                del self.freq_to_dummy[self.min_freq]  # 移除空链表
        self.key_to_node[key] = node = Node(key, value)  # 新书
        self.push_front(self.freq_to_dummy[1], node)  # 放在「看过 1 次」的最上面
        self.min_freq = 1

    # 删除一个节点（抽出一本书）
    def remove(self, x: Node) -> None:
        x.prev.next = x.next
        x.next.prev = x.prev

    # 在链表头添加一个节点（把一本书放在最上面）
    def push_front(self, dummy: Node, x: Node) -> None:
        x.prev = dummy
        x.next = dummy.next
        x.prev.next = x
        x.next.prev = x
```

* [sol-Java]

```java
class LFUCache {
    private static class Node {
        int key, value, freq = 1; // 新书只读了一次
        Node prev, next;

        Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }

    private final int capacity;
    private final Map<Integer, Node> keyToNode = new HashMap<>();
    private final Map<Integer, Node> freqToDummy = new HashMap<>();
    private int minFreq;

    public LFUCache(int capacity) {
        this.capacity = capacity;
    }

    public int get(int key) {
        Node node = getNode(key);
        return node != null ? node.value : -1;
    }

    public void put(int key, int value) {
        Node node = getNode(key);
        if (node != null) { // 有这本书
            node.value = value; // 更新 value
            return;
        }
        if (keyToNode.size() == capacity) { // 书太多了
            Node dummy = freqToDummy.get(minFreq);
            Node backNode = dummy.prev; // 最左边那摞书的最下面的书
            keyToNode.remove(backNode.key);
            remove(backNode); // 移除
            if (dummy.prev == dummy) { // 这摞书是空的
                freqToDummy.remove(minFreq); // 移除空链表
            }
        }
        node = new Node(key, value); // 新书
        keyToNode.put(key, node);
        pushFront(1, node); // 放在「看过 1 次」的最上面
        minFreq = 1;
    }

    private Node getNode(int key) {
        if (!keyToNode.containsKey(key)) { // 没有这本书
            return null;
        }
        Node node = keyToNode.get(key); // 有这本书
        remove(node); // 把这本书抽出来
        Node dummy = freqToDummy.get(node.freq);
        if (dummy.prev == dummy) { // 抽出来后，这摞书是空的
            freqToDummy.remove(node.freq); // 移除空链表
            if (minFreq == node.freq) { // 这摞书是最左边的
                minFreq++;
            }
        }
        pushFront(++node.freq, node); // 放在右边这摞书的最上面
        return node;
    }

    // 创建一个新的双向链表
    private Node newList() {
        Node dummy = new Node(0, 0); // 哨兵节点
        dummy.prev = dummy;
        dummy.next = dummy;
        return dummy;
    }

    // 在链表头添加一个节点（把一本书放在最上面）
    private void pushFront(int freq, Node x) {
        Node dummy = freqToDummy.computeIfAbsent(freq, k -> newList());
        x.prev = dummy;
        x.next = dummy.next;
        x.prev.next = x;
        x.next.prev = x;
    }

    // 删除一个节点（抽出一本书）
    private void remove(Node x) {
        x.prev.next = x.next;
        x.next.prev = x.prev;
    }
}
```

* [sol-C++]

```cpp
class Node {
public:
    int key, value, freq = 1; // 新书只读了一次
    Node *prev, *next;

    Node(int k = 0, int v = 0) : key(k), value(v) {}
};

class LFUCache {
private:
    int min_freq;
    int capacity;
    unordered_map<int, Node*> key_to_node;
    unordered_map<int, Node*> freq_to_dummy;

    Node *get_node(int key) {
        auto it = key_to_node.find(key);
        if (it == key_to_node.end()) { // 没有这本书
            return nullptr;
        }
        auto node = it->second; // 有这本书
        remove(node); // 把这本书抽出来
        auto dummy = freq_to_dummy[node->freq];
        if (dummy->prev == dummy) { // 抽出来后，这摞书是空的
            freq_to_dummy.erase(node->freq); // 移除空链表
            delete dummy; // 释放内存
            if (min_freq == node->freq) { // 这摞书是最左边的
                min_freq++;
            }
        }
        push_front(++node->freq, node); // 放在右边这摞书的最上面
        return node;
    }

    // 创建一个新的双向链表
    Node *new_list() {
        auto dummy = new Node(); // 哨兵节点
        dummy->prev = dummy;
        dummy->next = dummy;
        return dummy;
    }

    // 在链表头添加一个节点（把一本书放在最上面）
    void push_front(int freq, Node *x) {
        auto it = freq_to_dummy.find(freq);
        if (it == freq_to_dummy.end()) { // 这摞书是空的
            it = freq_to_dummy.emplace(freq, new_list()).first;
        }
        auto dummy = it->second;
        x->prev = dummy;
        x->next = dummy->next;
        x->prev->next = x;
        x->next->prev = x;
    }

    // 删除一个节点（抽出一本书）
    void remove(Node *x) {
        x->prev->next = x->next;
        x->next->prev = x->prev;
    }

public:
    LFUCache(int capacity) : capacity(capacity) {}

    int get(int key) {
        auto node = get_node(key);
        return node ? node->value : -1;
    }

    void put(int key, int value) {
        auto node = get_node(key);
        if (node) { // 有这本书
            node->value = value; // 更新 value
            return;
        }
        if (key_to_node.size() == capacity) { // 书太多了
            auto dummy = freq_to_dummy[min_freq];
            auto back_node = dummy->prev; // 最左边那摞书的最下面的书
            key_to_node.erase(back_node->key);
            remove(back_node); // 移除
            delete back_node; // 释放内存
            if (dummy->prev == dummy) { // 这摞书是空的
                freq_to_dummy.erase(min_freq); // 移除空链表
                delete dummy; // 释放内存
            }
        }
        key_to_node[key] = node = new Node(key, value); // 新书
        push_front(1, node); // 放在「看过 1 次」的最上面
        min_freq = 1;
    }
};
```

* [sol-Go]

```go
type entry struct {
    key, value, freq int // freq 表示这本书被看的次数
}

type LFUCache struct {
    capacity   int
    minFreq    int
    keyToNode  map[int]*list.Element
    freqToList map[int]*list.List
}

func Constructor(capacity int) LFUCache {
    return LFUCache{
        capacity:   capacity,
        keyToNode:  map[int]*list.Element{},
        freqToList: map[int]*list.List{},
    }
}

func (c *LFUCache) pushFront(e *entry) {
    if _, ok := c.freqToList[e.freq]; !ok {
        c.freqToList[e.freq] = list.New() // 双向链表
    }
    c.keyToNode[e.key] = c.freqToList[e.freq].PushFront(e)
}

func (c *LFUCache) getEntry(key int) *entry {
    node := c.keyToNode[key]
    if node == nil { // 没有这本书
        return nil
    }
    e := node.Value.(*entry)
    lst := c.freqToList[e.freq]
    lst.Remove(node) // 把这本书抽出来
    if lst.Len() == 0 { // 抽出来后，这摞书是空的
        delete(c.freqToList, e.freq) // 移除空链表
        if c.minFreq == e.freq { // 这摞书是最左边的
            c.minFreq++
        }
    }
    e.freq++ // 看书次数 +1
    c.pushFront(e) // 放在右边这摞书的最上面
    return e
}

func (c *LFUCache) Get(key int) int {
    if e := c.getEntry(key); e != nil { // 有这本书
        return e.value
    }
    return -1 // 没有这本书
}

func (c *LFUCache) Put(key, value int) {
    if e := c.getEntry(key); e != nil { // 有这本书
        e.value = value // 更新 value
        return
    }
    if len(c.keyToNode) == c.capacity { // 书太多了
        lst := c.freqToList[c.minFreq] // 最左边那摞书
        delete(c.keyToNode, lst.Remove(lst.Back()).(*entry).key) // 移除这摞书的最下面的书
        if lst.Len() == 0 { // 这摞书是空的
            delete(c.freqToList, c.minFreq) // 移除空链表
        }
    }
    c.pushFront(&entry{key, value, 1}) // 新书放在「看过 1 次」的最上面
    c.minFreq = 1
}
```

* [sol-JavaScript]

```js
class Node {
    constructor(key = 0, value = 0) {
        this.key = key;
        this.value = value;
        this.freq = 1; // 新书只读了一次
        this.prev = null;
        this.next = null;
    }
}

class LFUCache {
    constructor(capacity) {
        this.capacity = capacity;
        this.keyToNode = new Map();
        this.freqToDummy = new Map();
        this.minFreq = 0; // 初始化成什么值都可以
    }

    getNode(key) {
        if (!this.keyToNode.has(key)) { // 没有这本书
            return null;
        }
        const node = this.keyToNode.get(key); // 有这本书
        this.remove(node); // 把这本书抽出来
        const dummy = this.freqToDummy.get(node.freq);
        if (dummy.prev === dummy) { // 抽出来后，这摞书是空的
            this.freqToDummy.delete(node.freq); // 移除空链表
            if (this.minFreq === node.freq) { // 这摞书是最左边的
                this.minFreq++;
            }
        }
        this.pushFront(++node.freq, node); // 放在右边这摞书的最上面
        return node;
    }

    get(key) {
        const node = this.getNode(key);
        return node ? node.value : -1;
    }

    put(key, value) {
        const node = this.getNode(key);
        if (node) { // 有这本书
            node.value = value; // 更新 value
            return;
        }
        if (this.keyToNode.size === this.capacity) { // 书太多了
            const dummy = this.freqToDummy.get(this.minFreq);
            const backNode = dummy.prev; // 最左边那摞书的最下面的书
            this.keyToNode.delete(backNode.key);
            this.remove(backNode); // 移除
            if (dummy.prev === dummy) { // 这摞书是空的
                this.freqToDummy.delete(this.minFreq); // 移除空链表
            }
        }
        const newNode = new Node(key, value); // 新书
        this.keyToNode.set(key, newNode);
        this.pushFront(1, newNode); // 放在「看过 1 次」的最上面
        this.minFreq = 1;
    }

    // 创建一个新的双向链表
    newList() {
        const dummy = new Node(); // 哨兵节点
        dummy.prev = dummy;
        dummy.next = dummy;
        return dummy;
    }

    // 在链表头添加一个节点（把一本书放在最上面）
    pushFront(freq, x) {
        if (!this.freqToDummy.has(freq)) {
            this.freqToDummy.set(freq, this.newList());
        }
        const dummy = this.freqToDummy.get(freq);
        x.prev = dummy;
        x.next = dummy.next;
        x.prev.next = x;
        x.next.prev = x;
    }

    // 删除一个节点（抽出一本书）
    remove(x) {
        x.prev.next = x.next;
        x.next.prev = x.prev;
    }
}
```

* [sol-Rust]

```rust
use std::collections::HashMap;
use std::cell::RefCell;
use std::rc::Rc;

struct Node {
    key: i32,
    value: i32,
    freq: i32,
    prev: Option<Rc<RefCell<Node>>>,
    next: Option<Rc<RefCell<Node>>>,
}

impl Node {
    fn new(key: i32, value: i32) -> Rc<RefCell<Self>> {
        Rc::new(RefCell::new(Node { key, value, freq: 1, prev: None, next: None }))
    }
}

struct LFUCache {
    capacity: usize,
    min_freq: i32,
    key_to_node: HashMap<i32, Rc<RefCell<Node>>>,
    freq_to_dummy: HashMap<i32, Rc<RefCell<Node>>>,
}

impl LFUCache {
    fn new(capacity: i32) -> Self {
        LFUCache {
            capacity: capacity as usize,
            min_freq: 0,
            key_to_node: HashMap::new(),
            freq_to_dummy: HashMap::new(),
        }
    }

    fn get_node(&mut self, key: i32) -> Option<Rc<RefCell<Node>>> {
        if let Some(node) = self.key_to_node.get(&key) { // 有这本书
            let node = node.clone();
            Self::remove(node.clone()); // 把这本书抽出来
            let freq = node.borrow().freq;
            let dummy = self.freq_to_dummy.get(&freq).unwrap();
            if Rc::ptr_eq(dummy, dummy.borrow().prev.as_ref().unwrap()) { // 抽出来后，这摞书是空的
                self.freq_to_dummy.remove(&freq); // 移除空链表
                if self.min_freq == freq { // 这摞书是最左边的
                    self.min_freq += 1;
                }
            }
            node.borrow_mut().freq += 1; // 看书次数 +1
            self.push_front(freq + 1, node.clone()); // 放在右边这摞书的最上面
            return Some(node);
        }
        None // 没有这本书
    }

    fn get(&mut self, key: i32) -> i32 {
        if let Some(node) = self.get_node(key) { // 有这本书
            return node.borrow().value;
        }
        -1 // 没有这本书
    }

    fn put(&mut self, key: i32, value: i32) {
        if let Some(node) = self.get_node(key) { // 有这本书
            node.borrow_mut().value = value; // 更新 value
            return;
        }
        if self.key_to_node.len() == self.capacity { // 书太多了
            let dummy = self.freq_to_dummy.get(&self.min_freq).unwrap();
            let back_node = dummy.borrow().prev.clone().unwrap(); // 最左边那摞书的最下面的书
            let key = back_node.borrow().key;
            self.key_to_node.remove(&key);
            Self::remove(back_node); // 移除
            if Rc::ptr_eq(dummy, dummy.borrow().prev.as_ref().unwrap()) { // 抽出来后，这摞书是空的
                self.freq_to_dummy.remove(&self.min_freq); // 移除空链表
            }
        }
        let node = Node::new(key, value); // 新书
        self.key_to_node.insert(key, node.clone());
        self.push_front(1, node.clone()); // 放在「看过 1 次」的最上面
        self.min_freq = 1;
    }

    // 创建一个新的双向链表
    fn new_list() -> Rc<RefCell<Node>> {
        let dummy = Node::new(0, 0);
        dummy.borrow_mut().prev = Some(dummy.clone());
        dummy.borrow_mut().next = Some(dummy.clone());
        dummy
    }

    // 在链表头添加一个节点（把一本书放在最上面）
    fn push_front(&mut self, freq: i32, x: Rc<RefCell<Node>>) {
        let dummy = self.freq_to_dummy.entry(freq).or_insert_with(|| Self::new_list());
        let next = dummy.borrow().next.clone();
        x.borrow_mut().prev = Some(dummy.clone());
        x.borrow_mut().next = next.clone();
        dummy.borrow_mut().next = Some(x.clone());
        next.unwrap().borrow_mut().prev = Some(x);
    }

    // 删除一个节点（抽出一本书）
    fn remove(x: Rc<RefCell<Node>>) {
        let prev = x.borrow().prev.clone().unwrap();
        let next = x.borrow().next.clone().unwrap();
        prev.borrow_mut().next = Some(next.clone());
        next.borrow_mut().prev = Some(prev);
    }
}
```

#### 复杂度分析

- 时间复杂度：所有操作均为 $\mathcal{O}(1)$。
- 空间复杂度：$\mathcal{O}(\min(p, \textit{capacity}))$，其中 $p$ 为 $\text{put}$ 的调用次数。

## 相似题目

本题码量大，如果您在做本题时遇到一些困难，也可以先做完下面这些题目，再回过头来做本题。

- [146. LRU 缓存](https://leetcode.cn/problems/lru-cache/)，[我的题解](https://leetcode.cn/problems/lru-cache/solution/tu-jie-yi-zhang-tu-miao-dong-lrupythonja-czgt/)
- [895. 最大频率栈](https://leetcode.cn/problems/maximum-frequency-stack/)，[我的题解](https://leetcode.cn/problems/maximum-frequency-stack/solution/mei-xiang-ming-bai-yi-ge-dong-hua-miao-d-oich/)
- [1172. 餐盘栈](https://leetcode.cn/problems/dinner-plate-stacks/)，[我的题解](https://leetcode.cn/problems/dinner-plate-stacks/solution/yu-qi-wei-hu-di-yi-ge-wei-man-zhan-bu-ru-sphs/)

欢迎关注 [B站@灵茶山艾府](https://b23.tv/JMcHRRp)

更多精彩题解，请看 [往期题解精选（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
