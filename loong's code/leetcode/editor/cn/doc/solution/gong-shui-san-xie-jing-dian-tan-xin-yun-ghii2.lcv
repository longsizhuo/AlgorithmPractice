## 贪心 + 优先队列（堆）

这是一道很好的题目。

题目是要我们构造出一种可行的排列，排列中每个课程的实际结束时间满足「最晚完成时间」要求，求可行排序的最大长度（每个课程对答案的贡献都是 $1$）。

这容易引导我们往「泛化背包」方面进行思考：简单来说，对于某个物品（课程）而言，在不同条件下成本不同，在时间轴 $[1, courses[i][1] - courses[i][0]]$ 上该物品可被选，成本为其持续时间，在比该范围大的数轴上无法被选，成本为正无穷。因此某一段特定的时间轴上，问题可抽象成有条件限制的组合优化问题。

**由于数据范围为 $10^4$，泛化背包做法需要记录的维度大于一维，不予考虑。**

再然后容易想到「二分」，显然在以最大选择数量 $ans$ 为分割点的数组上具有「二段性」：

* 使用数量小于等于 $ans$ 的课程能够构造出合法排序（考虑在最长合法序列上做减法即可）；
* 使用数量大于 $ans$ 的课程无法构造出合法排列。

此时二分范围为 $[0, n]$，问题转化为：如何在 $O(n)$ 检查是否可构造出某个长度 $len$ 的合法排列（实现 `check` 方法）。

**常规的线性扫描做法无法确定是否存在某个长度的合法排列，因此二分不予考虑。**

我们需要运用「贪心」思维考虑可能的方案。

具体的，我们先根据「结束时间」对 $courses$ 排升序，从前往后考虑每个课程，处理过程中维护一个总时长 $sum$，对于某个课程 $courses[i]$ 而言，根据如果学习该课程，是否满足「最晚完成时间」要求进行分情况讨论：

* 学习该课程后，满足「最晚完成时间」要求，即 $sum + courses[i][0] <= courses[i][1]$，则进行学习；

* 学习该课程后，不满足「最晚完成时间」要求，此时从过往学习的课程中找出「持续时间」最长的课程进行「回退」操作（这个持续时长最长的课程有可能是当前课程）。

其中「记录当前已选课程」和「从过往学习的课程中找出持续时间最长的课程」操作可以使用优先队列（大根堆）实现。

可用「归纳法 + 反证法」证明该做法能够取到最优排列之一，定义最优排列为「总课程数最大，且总耗时最少」的合法排列。

1. 在课程数量相同的前提下，该做法得到的排列总耗时最少

   这点可通过「反证法」来证明：当不满足「最后完成时间」时，我们总是弹出「持续时间」最长的课程来进行回退，因此在所有课程对答案的贡献都是 $1$ 的前提下，该做法能够确保总耗时最少。即当堆中元素数量被调整为 $x$ 时，必然是由元素数量为 $x + 1$ 时，将持续时间最长的课程弹出所得来。

2. 该做法能够确保取得最大课程数量

   在得证第 $1$ 点后，可用「归纳法」进行证明第 $2$ 点：只考虑一个课程的情况下（假定 $courses[0][0] < courses[0][1]$），选该课程会比不选更好。
   将 $courses[0]$ 的最优解排列记为 $s[0]$，当确定了 $s[0]$ 后再考虑如何处理 $courses[1]$ 来得到 $s[1]$。
   首先可知 $s[1]$ 只有三种情况：

   * $s[1] = s[0]$：意味着 $courses[1]$ 不参与到最优解排列当中；
   * $s[1] \neq s[0]$，但两个最优解长度相同：意味着 $s[1]$ 是由 $courses[1]$ 替换了 $s[0]$ 中的某个课程而来（此时只有第 $0$ 个课程），且基于证明 $1$ 可以得证，被替换的课程持续时间比 $courses[1]$ 要长；
   * $s[1] \neq s[0]$，且 $s[1]$ 长度比 $s[0]$ 大 $1$：意味着 $s[1]$ 是由 $courses[1]$ 最接追加到 $s[0]$ 而来。

   综上，我们证明了，如果已知某个边界情况的最优解，那么由边界的最优解可推导出在此基础上多考虑一个课程时的最优解。即以上分析可以推广到任意的 $s[i - 1]$ 和 $s[i]$。

   **需要注意，在推广到任意的 $s[i - 1]$ 和 $s[i]$ 时，还需要证明在已知 $s[i - 1]$ 时，多考虑一个 $courses[i]$ 不会出现 $s[i]$ 的和 $s[i - 1]$ 的长度差超过 $1$ 的情况。**
   这个基于已得证的第 $1$ 点，再用反证法可证：如果在 $s[i - 1]$ 的基础上多考虑一个 $courses[i]$ 能够使得总长度增加超过 $1$，说明存在一个「之前没有被选的课程」+「课程 $courses[i]$」的持续时间比「被替换的课程」短。
   那么使用这个「之前没有被选的课程」直接替换「被替换的课程」可得到长度与 $s[i - 1]$ 相同，且总耗时更短的排列方案，这与 $s[i - 1]$ 本身是最优排列冲突。

代码：

* []

```Java
class Solution {
    public int scheduleCourse(int[][] courses) {
        Arrays.sort(courses, (a,b)->a[1]-b[1]);
        PriorityQueue<Integer> q = new PriorityQueue<>((a,b)->b-a);
        int sum = 0;
        for (int[] c : courses) {
            int d = c[0], e = c[1];
            sum += d;
            q.add(d);
            if (sum > e) sum -= q.poll();
        }
        return q.size();
    }
}
```

* 时间复杂度：$O(n\log{n})$
* 空间复杂度：$O(n)$

---

## 其他「贪心算法」系列内容

考虑加练如下「贪心算法」系列内容 🍭🍭🍭

| 题目                                                         | 题解                                                         | 难度 | 推荐指数 |
| ------------------------------------------------------------ | ------------------------------------------------------------ | ---- | -------- |
| [11. 盛最多水的容器](https://leetcode-cn.com/problems/container-with-most-water/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/container-with-most-water/solution/shua-chuan-lc-shuang-zhi-zhen-tan-xin-ji-52gf/) | 中等 | 🤩🤩🤩🤩🤩    |
| [45. 跳跃游戏 II](https://leetcode-cn.com/problems/jump-game-ii/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/jump-game-ii/solution/xiang-jie-dp-tan-xin-shuang-zhi-zhen-jie-roh4/) | 中等 | 🤩🤩🤩🤩     |
| [179. 最大数](https://leetcode-cn.com/problems/largest-number/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/largest-number/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-vn86e/) | 中等 | 🤩🤩🤩🤩     |
| [502. IPO](https://leetcode-cn.com/problems/ipo/)            | [LeetCode 题解链接](https://leetcode-cn.com/problems/ipo/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-fk1ra/) | 困难 | 🤩🤩🤩      |
| [517. 超级洗衣机](https://leetcode-cn.com/problems/super-washing-machines/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/super-washing-machines/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-mzqia/) | 困难 | 🤩🤩🤩      |
| [524. 通过删除字母匹配到字典里最长单词](https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/solution/gong-shui-san-xie-xiang-jie-pai-xu-shuan-qi20/) | 中等 | 🤩🤩🤩🤩     |
| [561. 数组拆分 I](https://leetcode-cn.com/problems/array-partition-i/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/array-partition-i/solution/jue-dui-neng-kan-dong-de-zheng-ming-fan-f7trz/) | 简单 | 🤩🤩🤩🤩     |
| [575. 分糖果](https://leetcode-cn.com/problems/distribute-candies/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/distribute-candies/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-pjjxo/) | 简单 | 🤩🤩🤩🤩     |
| [765. 情侣牵手](https://leetcode-cn.com/problems/couples-holding-hands/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/couples-holding-hands/solution/liang-chong-100-de-jie-fa-bing-cha-ji-ta-26a6/) | 困难 | 🤩🤩🤩      |
| [781. 森林中的兔子](https://leetcode-cn.com/problems/rabbits-in-forest/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/rabbits-in-forest/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-v17p5/) | 中等 | 🤩🤩🤩🤩     |
| [881. 救生艇](https://leetcode-cn.com/problems/boats-to-save-people/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/boats-to-save-people/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-hosg8/) | 中等 | 🤩🤩🤩🤩     |
| [995. K 连续位的最小翻转次数](https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips/solution/po-su-tan-xin-jie-fa-yu-tan-xin-chai-fen-4lyy/) | 困难 | 🤩🤩🤩      |
| [1221. 分割平衡字符串](https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-wumnk/) | 简单 | 🤩🤩🤩🤩     |
| [1707. 与数组中元素的最大异或值](https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/solution/gong-shui-san-xie-jie-zhe-ge-wen-ti-lai-lypqr/) | 困难 | 🤩🤩🤩      |
| [1713. 得到子序列的最少操作次数](https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-oj7yu/) | 困难 | 🤩🤩🤩🤩🤩    |
| [1736. 替换隐藏数字得到的最晚时间](https://leetcode-cn.com/problems/latest-time-by-replacing-hidden-digits/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/latest-time-by-replacing-hidden-digits/solution/gong-shui-san-xie-ti-huan-yin-cang-shu-z-2l1h/) | 简单 | 🤩🤩🤩🤩🤩    |
| [1833. 雪糕的最大数量](https://leetcode-cn.com/problems/maximum-ice-cream-bars/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/maximum-ice-cream-bars/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-yrhjx/) | 中等 | 🤩🤩🤩🤩🤩    |
| [1846. 减小和重新排列数组后的最大元素](https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-yh9qt/) | 中等 | 🤩🤩🤩🤩🤩    |
| [1877. 数组中最大数对和的最小值](https://leetcode-cn.com/problems/minimize-maximum-pair-sum-in-array/) | [LeetCode 题解链接](https://leetcode-cn.com/problems/minimize-maximum-pair-sum-in-array/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-ru29y/) | 中等 | 🤩🤩🤩🤩🤩    |

**注：以上目录整理来自 [wiki](https://github.com/SharingSource/LogicStack-LeetCode/wiki/贪心算法)，任何形式的转载引用请保留出处。**

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
