> Problem: [1911. 最大子序列交替和](https://leetcode.cn/problems/maximum-alternating-subsequence-sum/description/)

# 时空复杂度

- 时间复杂度分析：

在这个函数中，我们使用一个循环来迭代数组 nums 的元素。由于遍历数组中的每个元素仅需要一次操作，因此循环的时间复杂度为 O(n)，其中 n 是数组的长度。

- 空间复杂度分析：

在这个函数中，我们只使用了常量级的额外空间。除了循环变量 i、初始值 x 和差值 diff 的存储空间外，我们没有使用任何额外的数据结构。因此，该函数的空间复杂度为 O(1)，即常量级空间消耗。

# Code

* []

```Python
class Solution:
    def maxAlternatingSum(self, nums: List[int]) -> int:
        return sum(max(nums[i] - nums[i-1], 0) for i in range(1, len(nums))) + nums[0]
```

![image.png](https://pic.leetcode.cn/1689015109-fEhEPO-image.png)

* []

```go
func maxAlternatingSum(nums []int) int64 {
    x := int64(nums[0]) // 初始值为第一个元素
    for i := 1; i < len(nums); i++ {
        diff := nums[i] - nums[i-1]
        if diff > 0 {
            x += int64(diff) // 如果差值大于0，则加上差值
        }
    }
    return x
}
```

![image.png](https://pic.leetcode.cn/1689015138-ychTMX-image.png)
