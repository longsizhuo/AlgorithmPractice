# 方法一：并查集

见到图论求节点之间连通性的题
优先想**并查集**这个方法

虽然用**BFS**或**DFS**也能做出来

但是**并查集**一般只用把轮子CV过来，然后根据题意，写几行代码就完事了

以下是我自己写的**并查集**的轮子：

* []

```Java
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;


public class UnionFindSet {
    // 并查集
    public final int n;
    public int[] fa, rank, num;

    public UnionFindSet(final int n) {
        this.n = n;
        this.fa = new int[n];
        this.rank = new int[n];
        this.num = new int[n];
        for (int i = 0; i < n; i++) fa[i] = i;
        Arrays.fill(rank, 1);
        Arrays.fill(num, 1);
    }
    public UnionFindSet(final int n, final int initial) {
        this.n = n;
        this.fa = new int[n];
        this.rank = new int[n];
        this.num = new int[n];
        for (int i = 0; i < n; i++) fa[i] = i + initial;
        Arrays.fill(rank, 1);
        Arrays.fill(num, 1);
    }

    public int find(int x) { // 查找元素x所在集合的代表元素
        if (x == fa[x]) return x;
        fa[x] = find(fa[x]);
        return fa[x];
    }

    public void union(int i, int j) { // 合并元素i和j所在的集合
        int x = find(i), y = find(j);
        if (rank[x] <= rank[y]) fa[x] = y;
        else fa[y] = x;
        if (rank[x] == rank[y] && x != y) rank[y]++;
        if (x != y) num[x] = num[y] = num[x] + num[y];
    }

    public boolean check(int i, int j) { // 判断元素i和j是否属于同一集合
        return find(i) == find(j);
    }

    public int number(int x) { // 查询元素x所在集合的元素个数
        return num[find(x)];
    }

    public int total() { // 查询不同集合的总数
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            fa[i] = find(i);
            set.add(fa[i]);
        }
        return set.size();
    }
}

```

* []

```Python
class UnionFindSet:
    """并查集"""
    def __init__(self, n: int, initial = 0):
        self.n = n
        self.fa = [initial + i for i in range(n)]
        self.rank = [1 for i in range(n)]
        self.num = [1 for i in range(n)]

    def find(self, x: int) -> int:
        """查找元素x所在集合的代表元素"""
        if x == self.fa[x]:
            return x
        else:
            self.fa[x] = self.find(self.fa[x])
            return self.fa[x]
    
    def union(self, i: int, j: int):
        """合并元素i和j所在的集合"""
        fa, rank, num = self.fa, self.rank, self.num
        x, y = self.find(i), self.find(j)
        if rank[x] <= rank[y]:
            fa[x] = y
        else:
            fa[y] = x
        if rank[x] == rank[y] and x != y:
            rank[y] += 1
        if x != y:
            num[x] = num[y] = num[x] + num[y]
    
    def check(self, i: int, j: int) -> bool:
        """判断元素i和j是否属于同一集合"""
        return find(i) == find(j)
    
    def number(self, x: int) -> int:
        """查询元素x所在集合的元素个数"""
        return self.num[self.find(x)]
    
    def total(self) -> int:
        """查询不同集合的总数"""
        for i in range(self.n):
            self.fa[i] = self.find(i)
        return len(set(self.fa))
```

具体实现看代码注释

* []

```Java
public class UnionFindSet {
    // 并查集
    public final int n;
    public int[] fa, rank, num;

    public UnionFindSet(final int n) {
        this.n = n;
        this.fa = new int[n];
        this.rank = new int[n];
        this.num = new int[n];
        for (int i = 0; i < n; i++) fa[i] = i;
        Arrays.fill(rank, 1);
        Arrays.fill(num, 1);
    }
    public UnionFindSet(final int n, final int initial) {
        this.n = n;
        this.fa = new int[n];
        this.rank = new int[n];
        this.num = new int[n];
        for (int i = 0; i < n; i++) fa[i] = i + initial;
        Arrays.fill(rank, 1);
        Arrays.fill(num, 1);
    }

    public int find(int x) { // 查找元素x所在集合的代表元素
        if (x == fa[x]) return x;
        fa[x] = find(fa[x]);
        return fa[x];
    }

    public void union(int i, int j) { // 合并元素i和j所在的集合
        int x = find(i), y = find(j);
        if (rank[x] <= rank[y]) fa[x] = y;
        else fa[y] = x;
        if (rank[x] == rank[y] && x != y) rank[y]++;
        if (x != y) num[x] = num[y] = num[x] + num[y];
    }

    public boolean check(int i, int j) { // 判断元素i和j是否属于同一集合
        return find(i) == find(j);
    }

    public int number(int x) { // 查询元素x所在集合的元素个数
        return num[find(x)];
    }

    public int total() { // 查询不同集合的总数
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            fa[i] = find(i);
            set.add(fa[i]);
        }
        return set.size();
    }
}

class Solution {
    public long countPairs(int n, int[][] edges) {
        UnionFindSet UFS = new UnionFindSet(n); // 先创建一个并查集的实例对象
        for (int[] edge: edges) UFS.union(edge[0], edge[1]); // 将每条边的两个节点合并
        long ans = 0; // 答案
        for (int i = 0; i < n; i++) { // 遍历每个节点
            ans += n - UFS.number(i); // 第i个节点对答案的贡献为：与它不互通的节点个数
        }
        return ans >> 1; // 因为求的是对的数目，所以最终答案要除2
    }
}
```

* []

```Python
class UnionFindSet:
    """并查集"""
    def __init__(self, n: int, initial = 0):
        self.n = n
        self.fa = [initial + i for i in range(n)]
        self.rank = [1 for i in range(n)]
        self.num = [1 for i in range(n)]

    def find(self, x: int) -> int:
        """查找元素x所在集合的代表元素"""
        if x == self.fa[x]:
            return x
        else:
            self.fa[x] = self.find(self.fa[x])
            return self.fa[x]
    
    def union(self, i: int, j: int):
        """合并元素i和j所在的集合"""
        fa, rank, num = self.fa, self.rank, self.num
        x, y = self.find(i), self.find(j)
        if rank[x] <= rank[y]:
            fa[x] = y
        else:
            fa[y] = x
        if rank[x] == rank[y] and x != y:
            rank[y] += 1
        if x != y:
            num[x] = num[y] = num[x] + num[y]
    
    def check(self, i: int, j: int) -> bool:
        """判断元素i和j是否属于同一集合"""
        return find(i) == find(j)
    
    def number(self, x: int) -> int:
        """查询元素x所在集合的元素个数"""
        return self.num[self.find(x)]
    
    def total(self) -> int:
        """查询不同集合的总数"""
        for i in range(self.n):
            self.fa[i] = self.find(i)
        return len(set(self.fa))

class Solution:
    def countPairs(self, n: int, edges: List[List[int]]) -> int:
        UFS = UnionFindSet(n) # 先创建一个并查集的实例对象
        for x, y in edges: # 遍历边集
            UFS.union(x, y) # 将每条边的两个节点合并
        return sum(n - UFS.number(i) for i in range(n)) // 2 # 这一步看Java注释
```

时空复杂度和官解的方法一一样

效率拉满
![image.png](https://pic.leetcode.cn/1697867232-bvMRte-image.png)

