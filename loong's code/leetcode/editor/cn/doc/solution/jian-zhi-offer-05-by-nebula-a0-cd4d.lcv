### 题解1：

直接用replace来进行替换。

* python

```python
class Solution:
    def replaceSpace(self, s: str) -> str:
        return s.replace(" ","%20")
```

执行用时：36 ms, 在所有 Python3 提交中击败了65.85%的用户

内存消耗：14.9 MB, 在所有 Python3 提交中击败了58.50%的用户

通过测试用例：27 / 27

### 题解2：

遍历，然后新建一个字符串

* python

```python
class Solution:
    def replaceSpace(self, s: str) -> str:
        str1=""
        for i in s:
            if i==" ":
                str1=str1+"%20"
            else:
                str1=str1+i
        return str1
```

执行用时：40 ms, 在所有 Python3 提交中击败了35.58%的用户

内存消耗：14.8 MB, 在所有 Python3 提交中击败了93.07%的用户

通过测试用例：27 / 27

### 题解3：

使用split来先切割，然后再使用%20来连接

* python

```python
class Solution:
    def replaceSpace(self, s: str) -> str:
        s=s.split(" ")
        return "%20".join(s)
```

执行用时：36 ms, 在所有 Python3 提交中击败了65.85%的用户

内存消耗：14.9 MB, 在所有 Python3 提交中击败了68.61%的用户

通过测试用例：27 / 27

### 题解4：

使用列表保存数据，然后转变成字符串

* python

```python
class Solution:
    def replaceSpace(self, s: str) -> str:
        res = []
        for c in s:
            if c == ' ': 
                res.append("%20")
            else: 
                res.append(c)
        return "".join(res)
```

执行用时：48 ms, 在所有 Python3 提交中击败了10.71%的用户

内存消耗：14.9 MB, 在所有 Python3 提交中击败了53.24%的用户

通过测试用例：27 / 27
