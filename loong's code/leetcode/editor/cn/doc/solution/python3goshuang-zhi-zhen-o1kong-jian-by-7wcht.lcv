> Problem: [42. 接雨水](https://leetcode.cn/problems/trapping-rain-water/description/)

# 思路

使用两个指针 left 和 right，分别指向高度数组的最左端和最右端。同时，使用 left_max 和 right_max 来保存左侧和右侧的最大高度。在移动指针的过程中，计算每个位置可以存储的雨水量，并累加到结果 water 中。

# 复杂度

- 时间复杂度：该算法使用了一次遍历，因此时间复杂度为 O(n)，其中 n 是高度数组的长度。

- 空间复杂度：该算法只使用了常数级别的额外空间用于存储指针、最大高度和雨水量等变量，因此空间复杂度为 O(1)。

# Code

* []

```Python
class Solution:
    def trap(self, height: List[int]) -> int:
        if not height or len(height) < 3:
            return 0
        
        n = len(height)
        left, right = 0, n - 1
        left_max, right_max = 0, 0
        water = 0
        
        while left < right:
            if height[left] < height[right]:
                if height[left] >= left_max:
                    left_max = height[left]
                else:
                    water += left_max - height[left]
                left += 1
            else:
                if height[right] >= right_max:
                    right_max = height[right]
                else:
                    water += right_max - height[right]
                right -= 1
        
        return water
```

![image.png](https://pic.leetcode.cn/1690042178-FUJnuR-image.png)

* []

```go
func trap(height []int) int {
    n := len(height)
    if n < 3 {
        return 0
    }
    
    left, right := 0, n-1
    leftMax, rightMax := 0, 0
    water := 0
    
    for left < right {
        if height[left] < height[right] {
            if height[left] >= leftMax {
                leftMax = height[left]
            } else {
                water += leftMax - height[left]
            }
            left++
        } else {
            if height[right] >= rightMax {
                rightMax = height[right]
            } else {
                water += rightMax - height[right]
            }
            right--
        }
    }
    
    return water
}
```

![image.png](https://pic.leetcode.cn/1690042204-sBRWiq-image.png)
