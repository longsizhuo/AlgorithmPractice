## 一、启发思考：寻找子问题

假设 $n=9$。

我们要解决的问题是从 $1$ 开到 $9$ 最多可以赚多少钱。

如果没有乘客在 $9$ 下车，或者我们不载在 $9$ 下车的乘客，那么问题变成：

- 从 $1$ 开到 $8$ 最多可以赚多少钱。

如果有至少一位乘客在 $9$ 下车，我们可以枚举载哪位乘客。假设所载乘客在 $5$ 上车，那么从 $5$ 到 $9$ 不能载其它乘客（题目要求同时最多只能接一个订单），问题变成：

- 从 $1$ 开到 $5$ 最多可以赚多少钱。

注意可以在一个地点放下一位乘客，并在同一个地点接上另一位乘客。

不载乘客和枚举载哪个乘客，都会把原问题变成一个**和原问题相似的、规模更小的子问题**，这意味着我们可以用**递归**解决。

> 注：从右往左思考，主要是为了方便把递归翻译成递推。从左往右思考也是可以的。

## 二、递归怎么写：状态定义与状态转移方程

因为要解决的问题都是「从 $1$ 开到 $i$」，所以定义 $\textit{dfs}(i)$ 表示从 $1$ 开到 $i$ 最多可以赚多少钱。

如果没有乘客在 $i$ 下车，或者我们不载在 $i$ 下车的乘客，问题变成：从 $1$ 开到 $i-1$ 最多可以赚多少钱，即

$$
\textit{dfs}(i) = \textit{dfs}(i-1)
$$

如果有至少一位乘客在 $i$ 下车，我们可以枚举载哪位乘客，取其中最赚钱的方案，即

$$
\textit{dfs}(i) = \max_{j}\{\textit{dfs}(\textit{start}_j) + i - \textit{start}_j + \textit{tip}_j\}
$$

其中 $j$ 满足 $\textit{end}_j = i$。

这两种情况取最大值，就得到了 $\textit{dfs}(i)$，即

$$
\textit{dfs}(i) = \max(\textit{dfs}(i-1), \max_{j}\{\textit{dfs}(\textit{start}_j) + i - \textit{start}_j + \textit{tip}_j\})
$$

递归边界：$\textit{dfs}(1)=0$。注意没有在 $1$ 下车的乘客。

递归入口：$\textit{dfs}(n)$，也就是答案。

代码实现时，为了方便枚举所有在 $i$ 下车的乘客，可以把 $\textit{rides}$ 按照 $\textit{end}$ 分组。分组时，对相同的 $\textit{end}$，记录 $\textit{start}$ 以及 $\textit{end} - \textit{start} + \textit{tip}$。

* [sol-Python3]

```py
# 会超时的递归代码
class Solution:
    def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:
        groups = defaultdict(list)
        for start, end, tip in rides:
            groups[end].append((start, end - start + tip))

        def dfs(i: int) -> int:
            if i == 1:
                return 0
            return max(dfs(i - 1), max((dfs(s) + t for s, t in groups[i]), default=0))
        return dfs(n)
```

* [sol-Java]

```java
// 会超时的递归代码
class Solution {
    public long maxTaxiEarnings(int n, int[][] rides) {
        List<int[]>[] groups = new ArrayList[n + 1];
        for (int[] r : rides) {
            int start = r[0], end = r[1], tip = r[2];
            if (groups[end] == null) {
                groups[end] = new ArrayList<>();
            }
            groups[end].add(new int[]{start, end - start + tip});
        }
        return dfs(n, groups);
    }

    private long dfs(int i, List<int[]>[] groups) {
        if (i == 1) {
            return 0;
        }
        long res = dfs(i - 1, groups);
        if (groups[i] != null) {
            for (int[] p : groups[i]) {
                res = Math.max(res, dfs(p[0], groups) + p[1]);
            }
        }
        return res;
    }
}
```

* [sol-C++]

```cpp
// 会超时的递归代码
class Solution {
public:
    long long maxTaxiEarnings(int n, vector<vector<int>> &rides) {
        vector<vector<pair<int, int>>> groups(n + 1);
        for (auto &r : rides) {
            int start = r[0], end = r[1], tip = r[2];
            groups[end].emplace_back(start, end - start + tip);
        }

        function<long long(int)> dfs = [&](int i) -> long long {
            if (i == 1) {
                return 0;
            }
            long long res = dfs(i - 1);
            for (auto &[s, t] : groups[i]) {
                res = max(res, dfs(s) + t);
            }
            return res;
        };
        return dfs(n);
    }
};
```

* [sol-Go]

```go
// 会超时的递归代码
func maxTaxiEarnings(n int, rides [][]int) int64 {
    type pair struct{ s, t int }
    groups := make([][]pair, n+1)
    for _, r := range rides {
        start, end, tip := r[0], r[1], r[2]
        groups[end] = append(groups[end], pair{start, end - start + tip})
    }

    var dfs func(int) int64
    dfs = func(i int) int64 {
        if i == 1 {
            return 0
        }
        res := dfs(i - 1)
        for _, p := range groups[i] {
            res = max(res, dfs(p.s)+int64(p.t))
        }
        return res
    }
    return dfs(n)
}
```

* [sol-JavaScript]

```js
// 会超时的递归代码
var maxTaxiEarnings = function (n, rides) {
    const groups = Array(n + 1).fill(null).map(() => []);
    for (const [start, end, tip] of rides) {
        groups[end].push([start, end - start + tip]);
    }

    function dfs(i) {
        if (i === 1) {
            return 0;
        }
        let res = dfs(i - 1);
        for (const [s, t] of groups[i]) {
            res = Math.max(res, dfs(s) + t);
        }
        return res;
    }
    return dfs(n);
};
```

* [sol-Rust]

```rust
// 会超时的递归代码
impl Solution {
    pub fn max_taxi_earnings(n: i32, rides: Vec<Vec<i32>>) -> i64 {
        let n = n as usize;
        let mut groups: Vec<Vec<(i32, i32)>> = vec![vec![]; (n + 1)];
        for r in &rides {
            let start = r[0];
            let end = r[1];
            let tip = r[2];
            groups[end as usize].push((start, end - start + tip));
        }

        fn dfs(i: usize, groups: &Vec<Vec<(i32, i32)>>) -> i64 {
            if i == 1 {
                return 0;
            }
            let mut res = dfs(i - 1, groups);
            for &(s, t) in &groups[i] {
                res = res.max(dfs(s as usize, groups) + t as i64);
            }
            res
        }
        dfs(n, &groups)
    }
}
```

## 三、递归 + 记录返回值 = 记忆化搜索

由于递归函数没有副作用，同样的入参无论计算多少次，算出来的结果都是一样的，因此可以用**记忆化搜索**来优化：

- 如果一个状态（递归入参）是第一次遇到，那么可以在返回前，把状态及其结果记到一个 $\textit{memo}$ 数组中。
- 如果一个状态不是第一次遇到（$\textit{memo}$ 中保存的结果不等于 $\textit{memo}$ 的初始值），那么可以直接返回 $\textit{memo}$ 中保存的结果。

**注意**：$\textit{memo}$ 数组的**初始值**一定不能等于要记忆化的值！例如初始值设置为 $0$，并且要记忆化的 $\textit{dfs}(i)$ 也等于 $0$，那就没法判断 $0$ 到底表示第一次遇到这个状态，还是表示之前遇到过了，从而导致记忆化失效。一般把初始值设置为 $-1$。

> Python 用户可以无视上面这段，直接用 `@cache` 装饰器。

* [sol-Python3]

```py
# 更快的写法请看下面的递推
class Solution:
    def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:
        groups = defaultdict(list)
        for start, end, tip in rides:
            groups[end].append((start, end - start + tip))

        @cache  # 缓存装饰器，避免重复计算 dfs 的结果
        def dfs(i: int) -> int:
            if i == 1:
                return 0
            return max(dfs(i - 1), max((dfs(s) + t for s, t in groups[i]), default=0))
        return dfs(n)
```

* [sol-Java]

```java
class Solution {
    public long maxTaxiEarnings(int n, int[][] rides) {
        List<int[]>[] groups = new ArrayList[n + 1];
        for (int[] r : rides) {
            int start = r[0], end = r[1], tip = r[2];
            if (groups[end] == null) {
                groups[end] = new ArrayList<>();
            }
            groups[end].add(new int[]{start, end - start + tip});
        }

        long[] memo = new long[n + 1];
        Arrays.fill(memo, -1); // -1 表示没有计算过
        return dfs(n, memo, groups);
    }

    private long dfs(int i, long[] memo, List<int[]>[] groups) {
        if (i == 1) {
            return 0;
        }
        if (memo[i] != -1) { // 之前计算过
            return memo[i];
        }
        long res = dfs(i - 1, memo, groups);
        if (groups[i] != null) {
            for (int[] p : groups[i]) {
                res = Math.max(res, dfs(p[0], memo, groups) + p[1]);
            }
        }
        return memo[i] = res; // 记忆化
    }
} 
```

* [sol-C++]

```cpp
class Solution {
public:
    long long maxTaxiEarnings(int n, vector<vector<int>> &rides) {
        vector<vector<pair<int, int>>> groups(n + 1);
        for (auto &r : rides) {
            int start = r[0], end = r[1], tip = r[2];
            groups[end].emplace_back(start, end - start + tip);
        }

        vector<long long> memo(n + 1, -1); // -1 表示没有计算过
        function<long long(int)> dfs = [&](int i) -> long long {
            if (i == 1) {
                return 0;
            }
            auto &res = memo[i]; // 注意这里是引用
            if (res != -1) { // 之前计算过
                return res;
            }
            res = dfs(i - 1);
            for (auto &[s, t] : groups[i]) {
                res = max(res, dfs(s) + t);
            }
            return res;
        };
        return dfs(n);
    }
};
```

* [sol-Go]

```go
func maxTaxiEarnings(n int, rides [][]int) int64 {
    type pair struct{ s, t int }
    groups := make([][]pair, n+1)
    for _, r := range rides {
        start, end, tip := r[0], r[1], r[2]
        groups[end] = append(groups[end], pair{start, end - start + tip})
    }

    memo := make([]int64, n+1)
    for i := range memo {
        memo[i] = -1 // -1 表示没有计算过
    }
    var dfs func(int) int64
    dfs = func(i int) int64 {
        if i == 1 {
            return 0
        }
        p := &memo[i]
        if *p != -1 { // 之前计算过
            return *p
        }
        res := dfs(i - 1)
        for _, p := range groups[i] {
            res = max(res, dfs(p.s)+int64(p.t))
        }
        *p = res // 记忆化
        return res
    }
    return dfs(n)
}
```

* [sol-JavaScript]

```js
var maxTaxiEarnings = function (n, rides) {
    const groups = Array(n + 1).fill(null).map(() => []);
    for (const [start, end, tip] of rides) {
        groups[end].push([start, end - start + tip]);
    }

    const memo = Array(n + 1).fill(-1); // -1 表示没有计算过
    function dfs(i) {
        if (i === 1) {
            return 0;
        }
        if (memo[i] !== -1) { // 之前计算过
            return memo[i];
        }
        let res = dfs(i - 1);
        for (const [s, t] of groups[i]) {
            res = Math.max(res, dfs(s) + t);
        }
        return memo[i] = res; // 记忆化
    }
    return dfs(n);
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_taxi_earnings(n: i32, rides: Vec<Vec<i32>>) -> i64 {
        let n = n as usize;
        let mut groups: Vec<Vec<(i32, i32)>> = vec![vec![]; (n + 1)];
        for r in &rides {
            let start = r[0];
            let end = r[1];
            let tip = r[2];
            groups[end as usize].push((start, end - start + tip));
        }

        let mut memo = vec![-1i64; n + 1]; // -1 表示没有计算过
        fn dfs(i: usize, memo: &mut Vec<i64>, groups: &Vec<Vec<(i32, i32)>>) -> i64 {
            if i == 1 {
                return 0;
            }
            if memo[i] != -1 { // 之前计算过
                return memo[i];
            }
            let mut res = dfs(i - 1, memo, groups);
            for &(s, t) in &groups[i] {
                res = res.max(dfs(s as usize, memo, groups) + t as i64);
            }
            memo[i] = res; // 记忆化
            res
        }
        dfs(n, &mut memo, &groups)
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n+m)$，其中 $m$ 为 $\textit{rides}$ 的长度。由于每个状态只会计算一次，动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。状态个数是 $\mathcal{O}(n)$，乍一看时间复杂度是 $\mathcal{O}(nm)$，但考虑到不同的 $i$ 对应的 $\textit{groups}[i]$ 是不同的，遍历所有 $\textit{groups}[i]$ 的循环次数加起来是 $\mathcal{O}(m)$，所以时间复杂度是 $\mathcal{O}(n+m)$。
- 空间复杂度：$\mathcal{O}(n+m)$。

## 四、1:1 翻译成递推

我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

具体来说，$f[i]$ 的定义和 $\textit{dfs}(i)$ 的定义是一样的，都表示从 $1$ 开到 $i$ 最多可以赚多少钱。

相应的递推式（状态转移方程）也和 $\textit{dfs}$ 一样：

$$
f[i] = \max(f[i-1], \max_{j}\{f[\textit{start}_j] + i - \textit{start}_j + \textit{tip}_j\})
$$

其中 $j$ 满足 $\textit{end}_j = i$。

> 相当于之前是用递归去计算每个状态，现在是**枚举**并计算每个状态。

初始值 $f[1]=0$，翻译自递归边界 $\textit{dfs}(1)=0$。

答案为 $f[n]$，翻译自递归入口 $\textit{dfs}(n)$。

* [sol-Python3]

```py
class Solution:
    def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:
        groups = defaultdict(list)
        for start, end, tip in rides:
            groups[end].append((start, end - start + tip))

        f = [0] * (n + 1)
        for i in range(2, n + 1):
            f[i] = f[i - 1]
            if i in groups:
                f[i] = max(f[i], max(f[s] + t for s, t in groups[i]))
        return f[n]
```

* [sol-Java]

```java
class Solution {
    public long maxTaxiEarnings(int n, int[][] rides) {
        List<int[]>[] groups = new ArrayList[n + 1];
        for (int[] r : rides) {
            int start = r[0], end = r[1], tip = r[2];
            if (groups[end] == null) {
                groups[end] = new ArrayList<>();
            }
            groups[end].add(new int[]{start, end - start + tip});
        }

        long[] f = new long[n + 1];
        for (int i = 2; i <= n; i++) {
            f[i] = f[i - 1];
            if (groups[i] != null) {
                for (int[] p : groups[i]) {
                    f[i] = Math.max(f[i], f[p[0]] + p[1]);
                }
            }
        }
        return f[n];
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    long long maxTaxiEarnings(int n, vector<vector<int>> &rides) {
        vector<vector<pair<int, int>>> groups(n + 1);
        for (auto &r : rides) {
            int start = r[0], end = r[1], tip = r[2];
            groups[end].push_back(make_pair(start, end - start + tip));
        }

        vector<long long> f(n + 1);
        for (int i = 2; i <= n; i++) {
            f[i] = f[i - 1];
            for (auto &[s, t] : groups[i]) {
                f[i] = max(f[i], f[s] + t);
            }
        }
        return f[n];
    }
};
```

* [sol-Go]

```go
func maxTaxiEarnings(n int, rides [][]int) int64 {
    type pair struct{ s, t int }
    groups := make([][]pair, n+1)
    for _, r := range rides {
        start, end, tip := r[0], r[1], r[2]
        groups[end] = append(groups[end], pair{start, end - start + tip})
    }

    f := make([]int64, n+1)
    for i := 2; i <= n; i++ {
        f[i] = f[i-1]
        for _, p := range groups[i] {
            f[i] = max(f[i], f[p.s]+int64(p.t))
        }
    }
    return f[n]
}
```

* [sol-JavaScript]

```js
var maxTaxiEarnings = function (n, rides) {
    const groups = Array(n + 1).fill(null).map(() => []);
    for (const [start, end, tip] of rides) {
        groups[end].push([start, end - start + tip]);
    }

    const f = Array(n + 1).fill(0);
    for (let i = 2; i <= n; i++) {
        f[i] = f[i - 1];
        for (const [s, t] of groups[i]) {
            f[i] = Math.max(f[i], f[s] + t);
        }
    }
    return f[n];
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn max_taxi_earnings(n: i32, rides: Vec<Vec<i32>>) -> i64 {
        let n = n as usize;
        let mut groups: Vec<Vec<(i32, i32)>> = vec![vec![]; (n + 1)];
        for r in &rides {
            let start = r[0];
            let end = r[1];
            let tip = r[2];
            groups[end as usize].push((start, end - start + tip));
        }

        let mut f: Vec<i64> = vec![0; (n + 1)];
        for i in 2..=n {
            f[i] = f[i - 1];
            for &(s, t) in &groups[i] {
                f[i] = f[i].max(f[s as usize] + t as i64);
            }
        }
        f[n]
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n+m)$，其中 $m$ 为 $\textit{rides}$ 的长度。内外层循环次数之和是 $\mathcal{O}(n+m)$，所以时间复杂度是 $\mathcal{O}(n+m)$。
- 空间复杂度：$\mathcal{O}(n+m)$。

## 思考题

如果允许同时载两个乘客，要怎么做？

欢迎在评论区发表你的思路。

## 相似题目（右边数字为难度分）

- [2830. 销售利润最大化](https://leetcode.cn/problems/maximize-the-profit-as-the-salesman/) 1851
- [1235. 规划兼职工作](https://leetcode.cn/problems/maximum-profit-in-job-scheduling/) 2023
- [1751. 最多可以参加的会议数目 II](https://leetcode.cn/problems/maximum-number-of-events-that-can-be-attended-ii/) 2041

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

更多 DP 题解，请看 [往期题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
