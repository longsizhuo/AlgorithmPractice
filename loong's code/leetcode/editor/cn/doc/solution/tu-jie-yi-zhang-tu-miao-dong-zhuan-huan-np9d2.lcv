![](https://pic.leetcode.cn/1697089221-bDdgkc-lc260-c.png)

代码实现时，需要找到异或和中的某个值为 $1$ 的比特位。

一种方式是计算 lowbit，只保留二进制最低位的 $1$，举例如下：

* cpp

```cpp
     s = 101100
    ~s = 010011
(~s)+1 = 010100 // 根据补码的定义，这就是 -s   最低 1 左侧取反，右侧不变
s & -s = 000100 // lowbit
```

该技巧收录在 [从集合论到位运算，常见位运算技巧分类总结！](https://leetcode.cn/circle/discuss/CaOJ45/)

* [sol-Python3]

```py
class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        xor_all = reduce(xor, nums)
        lowbit = xor_all & -xor_all
        ans = [0, 0]
        for x in nums:
            ans[(x & lowbit) != 0] ^= x  # 分组异或
        return ans
```

* [sol-Java]

```java
class Solution {
    public int[] singleNumber(int[] nums) {
        int xorAll = 0;
        for (int x : nums) {
            xorAll ^= x;
        }
        int lowbit = xorAll & -xorAll;
        int[] ans = new int[2];
        for (int x : nums) {
            ans[(x & lowbit) == 0 ? 0 : 1] ^= x; // 分组异或
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<int> singleNumber(vector<int> &nums) {
        unsigned int xor_all = 0;
        for (int x: nums) {
            xor_all ^= x;
        }
        int lowbit = xor_all & -xor_all;
        vector<int> ans(2);
        for (int x: nums) {
            ans[(x & lowbit) != 0] ^= x; // 分组异或
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func singleNumber(nums []int) []int {
    xorAll := 0
    for _, x := range nums {
        xorAll ^= x
    }
    lowbit := xorAll & -xorAll
    ans := make([]int, 2)
    for _, x := range nums {
        if x&lowbit == 0 { // 分组异或
            ans[0] ^= x
        } else {
            ans[1] ^= x
        }
    }
    return ans
}
```

* [sol-JavaScript]

```js
var singleNumber = function (nums) {
    let xorAll = 0;
    for (const x of nums) {
        xorAll ^= x;
    }
    const lowbit = xorAll & -xorAll;
    const ans = [0, 0];
    for (const x of nums) {
        ans[x & lowbit ? 1 : 0] ^= x; // 分组异或
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn single_number(nums: Vec<i32>) -> Vec<i32> {
        let xor_all = nums.iter().fold(0, |xor, &x| xor ^ x);
        let lowbit = xor_all & -xor_all;
        let mut ans = vec![0, 0];
        for &x in &nums {
            if (x & lowbit) == 0 { // 分组异或
                ans[0] ^= x;
            } else {
                ans[1] ^= x;
            }
        }
        ans
    }
}
```

也可以通过计算 $\textit{xorAll}$ **尾零的个数**，直接取得 $\textit{nums}[i]$ 在该比特位上的值，从而避免逻辑判断。

> 注：如果没有计算尾零个数的库函数，可以改为计算二进制的长度减一。

* [sol-Python3]

```py
class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        xor_all = reduce(xor, nums)
        shift = xor_all.bit_length() - 1 if xor_all > 0 else 31
        ans = [0, 0]
        for x in nums:
            ans[x >> shift & 1] ^= x
        return ans
```

* [sol-Java]

```java
class Solution {
    public int[] singleNumber(int[] nums) {
        int xorAll = 0;
        for (int x : nums) {
            xorAll ^= x;
        }
        int tz = Integer.numberOfTrailingZeros(xorAll);
        int[] ans = new int[2];
        for (int x : nums) {
            ans[x >>> tz & 1] ^= x;
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<int> singleNumber(vector<int> &nums) {
        int xor_all = 0;
        for (int x: nums) {
            xor_all ^= x;
        }
        int ctz = __builtin_ctz(xor_all);
        vector<int> ans(2);
        for (int x: nums) {
            ans[x >> ctz & 1] ^= x;
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func singleNumber(nums []int) []int {
    xorAll := 0
    for _, x := range nums {
        xorAll ^= x
    }
    tz := bits.TrailingZeros(uint(xorAll))
    ans := make([]int, 2)
    for _, x := range nums {
        ans[x>>tz&1] ^= x
    }
    return ans
}
```

* [sol-JavaScript]

```js
var singleNumber = function (nums) {
    let xorAll = 0;
    for (const x of nums) {
        xorAll ^= x;
    }
    const shift = 31 - Math.clz32(xorAll);
    const ans = [0, 0];
    for (const x of nums) {
        ans[x >> shift & 1] ^= x;
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn single_number(nums: Vec<i32>) -> Vec<i32> {
        let xor_all = nums.iter().fold(0, |xor, &x| xor ^ x);
        let tz = xor_all.trailing_zeros();
        let mut ans = vec![0, 0];
        for &x in &nums {
            ans[x as usize >> tz & 1] ^= x;
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{nums}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。

## 相似题目

- [136. 只出现一次的数字](https://leetcode.cn/problems/single-number/)
- [137. 只出现一次的数字 II](https://leetcode.cn/problems/single-number-ii/)

欢迎关注 [B站@灵茶山艾府](https://b23.tv/JMcHRRp)

更多精彩题解，请看 [往期题解精选（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
