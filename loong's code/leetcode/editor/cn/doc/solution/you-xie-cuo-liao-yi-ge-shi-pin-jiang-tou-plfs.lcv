视频讲解：[【基础算法精讲 06】](https://www.bilibili.com/video/BV1sd4y1x7KN/)，制作不易，欢迎点赞。

* [sol1-Python3]

```py
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        n = 0
        cur = head
        while cur:
            n += 1  # 统计节点个数
            cur = cur.next

        p0 = dummy = ListNode(next=head)
        pre = None
        cur = head
        while n >= k:
            n -= k
            for _ in range(k):  # 同 92 题
                nxt = cur.next
                cur.next = pre  # 每次循环只修改一个 next，方便大家理解
                pre = cur
                cur = nxt

            # 见视频
            nxt = p0.next
            nxt.next = cur
            p0.next = pre
            p0 = nxt
        return dummy.next
```

* [sol1-Java]

```java
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int n = 0;
        for (ListNode cur = head; cur != null; cur = cur.next)
            ++n; // 统计节点个数

        ListNode dummy = new ListNode(0, head), p0 = dummy;
        ListNode pre = null, cur = head;
        for (; n >= k; n -= k) {
            for (int i = 0; i < k; ++i) { // 同 92 题
                ListNode nxt = cur.next;
                cur.next = pre; // 每次循环只修改一个 next，方便大家理解
                pre = cur;
                cur = nxt;
            }

            // 见视频
            ListNode nxt = p0.next;
            p0.next.next = cur;
            p0.next = pre;
            p0 = nxt;
        }
        return dummy.next;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    ListNode *reverseKGroup(ListNode *head, int k) {
        int n = 0;
        for (ListNode *cur = head; cur; cur = cur->next)
            ++n; // 统计节点个数

        ListNode *dummy = new ListNode(0, head), *p0 = dummy;
        ListNode *pre = nullptr, *cur = head;
        for (; n >= k; n -= k) {
            for (int i = 0; i < k; ++i) { // 同 92 题
                ListNode *nxt = cur->next;
                cur->next = pre; // 每次循环只修改一个 next，方便大家理解
                pre = cur;
                cur = nxt;
            }

            // 见视频
            ListNode *nxt = p0->next;
            p0->next->next = cur;
            p0->next = pre;
            p0 = nxt;
        }
        return dummy->next;
    }
};
```

* [sol1-Go]

```go
func reverseKGroup(head *ListNode, k int) *ListNode {
    n := 0
    for cur := head; cur != nil; cur = cur.Next {
        n++ // 统计节点个数
    }

    dummy := &ListNode{Next: head}
    p0 := dummy
    var pre, cur *ListNode = nil, p0.Next
    for ; n >= k; n -= k {
        for i := 0; i < k; i++ {
            nxt := cur.Next
            cur.Next = pre // 每次循环只修改一个 Next，方便大家理解
            pre = cur
            cur = nxt
        }

        // 见视频
        nxt := p0.Next
        p0.Next.Next = cur
        p0.Next = pre
        p0 = nxt
    }
    return dummy.Next
}
```

#### 复杂度分析

- 时间复杂度：$O(n)$，其中 $n$ 为链表节点个数。
- 空间复杂度：$O(1)$，仅用到若干额外变量。

