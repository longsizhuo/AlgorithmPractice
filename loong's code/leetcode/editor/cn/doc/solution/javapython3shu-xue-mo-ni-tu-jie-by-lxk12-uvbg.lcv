# 题目

# 2544. 交替数字和

给你一个正整数 `n` 。`n` 中的每一位数字都会按下述规则分配一个符号：

- **最高有效位** 上的数字分配到 **正** 号。
- 剩余每位上数字的符号都与其相邻数字相反。

返回所有数字及其对应符号的和。

# 题目分析

这道题主要是模拟，从`n`的高位开始，取每一位的值，然后正负交替的相加，过程并不复杂。
难的点在于我们对于一个整数`n`去获取它的每一位值的时候，从低位到高位去获取更容易。因此我们可以对比从低位到高位的交替数字和与从高位到低位的交替数字和的差别。
![image.png](https://pic.leetcode.cn/1689092901-qzsCWd-image.png)

可以看到：
- `n`有奇数位，从低位到高位的交替数字和与从高位到低位的交替数字和**一致**，且结束时最后的符号为`+`；
- `n`有偶数位，从低位到高位的交替数字和与从高位到低位的交替数字和**为相反数**，且结束时最后的符号为`-`；

因此我们要把`n`有偶数位的结果取一个相反数即得到正确结果。而`n`**有偶数位的情况可以通过结束时最后的符号来判断**。

# 代码

代码中通过循环实现符号位的更新，因为**最后高位计算结束后，符号位还会变化一次**。
因此`n`有奇数位，最后符号位由`+`变成`-`；`n`有偶数位，最后符号位由`-`变成`+`；
因此**需要在加一个`-`才能得到正确的最后符号。**

* []

```java
class Solution {
    public int alternateDigitSum(int n) {
        int sign = 1;   // 符号位
        int sum = 0;    // 交替数字和
        while(n > 0){
            sum += sign * (n % 10);     // n % 10取当前最低位，乘以sign得到交替符号
            sign *= -1;                 // sign值交替变化
            n /= 10;                    // 去除n的最低位
        }
        // 如果结束时sign为负，说明结束时高位为正，sum * (-sign) = sum * 1 = sum
        // 如果结束时sign为正，说明结束时高位为负，sum * (-sign) = sum * (-1) = -sum
        return -sign * sum;
    }
}
```

* []

```python
class Solution:
    def alternateDigitSum(self, n: int) -> int:
        sign = 1        # 符号位
        sum_ = 0        # 交替数字和
        while n > 0:
            sum_ += sign * (n % 10)     # n % 10取当前最低位，乘以sign得到交替符号
            sign = -sign                # sign值交替变化
            n = n // 10
        # 如果结束时sign为负，说明结束时高位为正，sum * (-sign) = sum * 1 = sum
        # 如果结束时sign为正，说明结束时高位为负，sum * (-sign) = sum * (-1) = -sum
        return -sign * sum_
```

